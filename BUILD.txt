Compile is quite simple (Pi):

sudo apt install meson\
 libavutil-dev libavcodec-dev libavfilter-dev\
 libdrm-dev libxcb1-dev libxcb-randr0-dev libx11-dev\
 libx11-xcb-dev libxcb-dri3-dev

# For ticker demos
sudo apt install libfreetype-dev fonts-freefont-ttf

# For kmscube
sudo apt install libgbm-dev libgles-dev

# For gstreamer
sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

meson setup build
cd build
meson compile

This builds various executables

hello_drmu    A demo of how to use drmu to play video from libav*
              Very similar to my hello_drmprime project.
	      Note that it deliberately does not have audio or proper pacing;
	      frames are played at one per vsync
	      Has options to play a ticker and rotate a cube on top of the
	      video if the freetype & cube libraries are built
	      ./hello_drmu -h will give options

resethdr      Trivial utility to reset HDR if it has become set and is burning
              your eyes

10bittest     Tries to set 10 bit mode and displays graduated colour bars
              Hit return to terminate
              "./10bittest -h" should give options

argbtest      Trivial test prog to check colour ordering in ARGB

freetype/example1
              A simple text scroller example based off the freetype tutorial
	      example program

cube/kmscube  The kmscube example extended to use drmu



Meson setup options (defaults in []):
-------------------------------------

xlease ([auto]/enabled/disabled)
              Build utilities with xlease drm handle support

xdri3 ([auto]/enabled/disabled)
              Build utilities with xdri3 drm handle support
              Doesn't actually work in any useful manner

waylease (auto/enabled/[disabled])
              Build utilities with wayland leasing drm handle support
              Whilst the wayland api exists for doing this I have yet to find a
              wayland compositor that supports this unless the device is marked
              as being a VR device. Code untested but left in repo for the
              future

sorted_fmts ([true]/false)
              Build drmu format info code with a pre-sorted format array array
              This gives faster format lookup. There is no downside. Option
              given to test the case where (say) VLC cannot be bothered with
              the extra build complexity.

valgrind (true/[false])
              Build drmu s.t. it works around valgrinds lack of knowledge about
              DRM ioctls. Clears arrays that are passed to ioctl to avoid use
              of undefined errors on the returned results. In normal usage
              malloc is used.




